#pragma range gridSize 0 0.01
surface writeVDB_surface(   string filePath = "/home/green/Downloads/data.vdb";
                            float gridSize = 0.005;
                            vector Cd = 1;
                            export vector diffuseClr = 0)
{
    int isShading = 0;
    rayimport("isShadingRay", isShading);
    if(isShading == 0){
        string pcfile = "/home/green/Downloads/data.pc";
        float u,v;
        float primid, subdid;
        vector surfp, surfn, origin, sample;
        vector pWorld, nWorld, pcDiffuse;
        int npoints = 1000000;
        int nfails = 0;
        float radius = 0.05;
        int pchandle = pcgenerate(pcfile, npoints);

        if(Pz < 1000){
            while (pcunshaded(pchandle, "P")){
                if (nfails == 15){
                    radius *= 0.9;
                    nfails = 0;
                }

                vector r = set(nrandom("qstrat"), nrandom("qstrat"), 0);
                if(sample_geometry(    r, r, 0.0,
                                    "scope", "*",
                                    "pipeline", "surface",
                                    "send:isShadingRay", 1,
                                    "P", surfp,
                                    //"N", surfn,
                                    "diffuseClr", pcDiffuse
                                    //"ray:primid", primid,
                                    //"ray:subdid", subdid,
                                    //"s", u,
                                    //"t", v
                                    )){
                    pWorld = ptransform("space:world", surfp);
                    if(pcexport(pchandle, "P", pWorld, radius)){             
                        nfails = 0;
                        pcwrite(pcfile, "P", pWorld, "Cd", pcDiffuse);                        
                    }
                    else{
                        nfails++;
                    }                //pcexport(pchandle, "Cd", diffuse);   
                }
            }
            pcclose(pchandle);
        }
    } // !isShading
    else{
        diffuseClr = diffuse(normalize(N));    
    }
            
    Of = Of;
    Cf = {0.1, 0, 0};
}
